import streamlit as st
import requests
import json
import plotly.io as pio
import pandas as pd
import os

def load_institutions():
    """Load and cache the institutions list"""
    @st.cache_data
    def _load_institutions():
        current_dir = os.path.dirname(__file__)
        file_path = os.path.join(current_dir, "..", "data", "institutions_name_list.csv")
        df = pd.read_csv(file_path)
        return df['NomeInstituicao'].tolist()

    return _load_institutions()

def main():
    # Load institutions list
    institutions_list = load_institutions()

    st.title("Market Share Linhas de Cr√©dito üìà")

    # Sidebar for controls
    with st.sidebar:
        st.header("Configura√ß√µes do Gr√°fico")

        # Credit modalities selection
        modalities = st.multiselect(
            "Selecione as modalidades de cr√©dito:",
            options=[
                "Total PF", "Consignado PF", "N√£o Consignado PF", "Ve√≠culos PF",
                "Outros Cr√©ditos PF", "Habita√ß√£o PF", "Cart√£o de Cr√©dito PF", "Rural PF",
                "Total PJ", "Receb√≠veis PJ", "Com√©rcio Exterior PJ", "Outros Cr√©ditos PJ",
                "Infraestrutura PJ", "Capital de Giro PJ", "Investimento PJ",
                "Capital de Giro Rotativo PJ", "Rural PJ", "Habita√ß√£o PJ", "Cheque Especial PJ"
            ],
            default=["Total PF", "Total PJ"],
            help="Selecione uma ou mais modalidades de cr√©dito para an√°lise"
        )

        # Number of top institutions
        top_n = st.number_input(
            "Top N institui√ß√µes:",
            min_value=1,
            max_value=50,
            value=10,
            help="N√∫mero de maiores institui√ß√µes a serem exibidas separadamente"
        )

        # Initial year filter
        initial_year = st.number_input(
            "Ano inicial:",
            min_value=2014,
            max_value=2024,
            value=2014,
            help="Filtrar dados a partir deste ano"
        )

        # When sending to the API, make it optional
        api_initial_year = initial_year if initial_year != 2014 else None

        # Show percentage toggle
        show_percentage = st.toggle(
            "Mostrar em percentual",
            value=True,
            help="Exibir valores em percentual do total ou valores absolutos"
        )

        # Custom institutions selection
        st.markdown("### Institui√ß√µes Espec√≠ficas")
        custom_institutions = st.multiselect(
            "Buscar e selecionar institui√ß√µes:",
            options=institutions_list,
            default=None,
            help="Digite para buscar institui√ß√µes espec√≠ficas",
            placeholder="Digite para buscar..."
        )

        # Add a note about the search functionality
        st.caption("üí° Digite o nome da institui√ß√£o para filtrar as op√ß√µes")

        # Show selected institutions count
        if custom_institutions:
            st.info(f"‚úì {len(custom_institutions)} institui√ß√µes selecionadas")

    # Main content area
    #st.subheader(f"Evolu√ß√£o do Market Share - {', '.join(modalities)}")

    try:
        # Call the API with parameters
        params = {
            "modalities": modalities,
            "top_n": top_n,
            "initial_year": api_initial_year,
            "show_percentage": show_percentage,
        }

        # Only add custom_selected_institutions if it's not empty
        if custom_institutions:
            params["custom_selected_institutions"] = custom_institutions

        response = requests.get(
            "https://bacen-api-522706975081.europe-west1.run.app/plot/share_credit_modality",
            params=params
        )

        if response.status_code == 200:
            fig_json = response.json()["figure_json"]
            fig = pio.from_json(fig_json)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.error(f"API Error: {response.status_code}")
            st.error("Response Text:")
            try:
                error_details = response.json()
                st.json(error_details)
            except:
                st.error(response.text)

    except Exception as e:
        st.error(f"Error connecting to the API: {str(e)}")
        st.error(f"Full error: {e.__class__.__name__}: {str(e)}")

    # Add explanatory text
    with st.expander("‚ÑπÔ∏è Sobre esta an√°lise"):
        st.markdown("""
        ### Interpreta√ß√£o do Gr√°fico
        - O gr√°fico mostra a evolu√ß√£o temporal da participa√ß√£o de mercado das institui√ß√µes financeiras em modalidades espec√≠ficas de cr√©dito
        - As √°reas s√£o empilhadas, somando 100% do mercado em cada per√≠odo
        - Institui√ß√µes menores s√£o agrupadas em "Others" para melhor visualiza√ß√£o

        ### Modalidades de Cr√©dito
        #### Pessoa F√≠sica (PF)
        - **Total PF**: Carteira total de cr√©dito para pessoas f√≠sicas
        - **Consignado**: Empr√©stimos com desconto em folha
        - **N√£o Consignado**: Empr√©stimos pessoais sem garantia
        - **Ve√≠culos**: Financiamento de ve√≠culos
        - **Habita√ß√£o**: Financiamento imobili√°rio
        - **Cart√£o de Cr√©dito**: Opera√ß√µes de cart√£o de cr√©dito
        - **Rural**: Cr√©dito rural e agroindustrial

        #### Pessoa Jur√≠dica (PJ)
        - **Total PJ**: Carteira total de cr√©dito para pessoas jur√≠dicas
        - **Receb√≠veis**: Antecipa√ß√£o de receb√≠veis
        - **Com√©rcio Exterior**: Financiamento de importa√ß√£o/exporta√ß√£o
        - **Infraestrutura**: Financiamento de projetos de infraestrutura
        - **Capital de Giro**: Financiamento de capital de giro
        - **Investimento**: Financiamento de investimentos

        ### Notas Metodol√≥gicas
        - Dados fonte: Bacen (IF.data)
        - Frequ√™ncia: Trimestral
        - Market Share calculado como: (valor_institui√ß√£o / valor_total_mercado) * 100
        """)

if __name__ == "__main__":
    st.set_page_config(
        page_title="Market Share por Segmento de Cr√©dito",
        page_icon="üí∞",
        layout="wide"
    )
    main()
