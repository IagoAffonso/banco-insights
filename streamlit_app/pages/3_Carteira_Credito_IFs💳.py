import streamlit as st
import requests
import json
import plotly.io as pio
import pandas as pd
import os

def load_institutions():
    """Load and cache the institutions list"""
    @st.cache_data
    def _load_institutions():
        current_dir = os.path.dirname(__file__)
        file_path = os.path.join(current_dir, "..", "data", "institutions_name_list.csv")
        df = pd.read_csv(file_path)
        return df['NomeInstituicao'].tolist()

    return _load_institutions()

def main():
    # Load institutions list
    institutions_list = load_institutions()

    st.title("Carteira de Cr√©dito por IF üìä")

    # Sidebar for controls
    with st.sidebar:
        st.header("Configura√ß√µes do Gr√°fico")

        # Institution selection
        st.markdown("### Sele√ß√£o de Institui√ß√µes")
        analysis_scope = st.radio(
            "Escopo da An√°lise:",
            options=["Mercado Total", "Institui√ß√µes Espec√≠ficas"],
            help="Escolha entre an√°lise do mercado total ou institui√ß√µes espec√≠ficas"
        )

        if analysis_scope == "Institui√ß√µes Espec√≠ficas":
            selected_institutions = st.multiselect(
                "Selecione as institui√ß√µes:",
                options=institutions_list,
                default=["ITAU", "BRADESCO", "SANTANDER"],
                help="Digite para buscar institui√ß√µes espec√≠ficas",
                placeholder="Digite para buscar..."
            )

            # Show selected institutions count
            if selected_institutions:
                st.info(f"‚úì {len(selected_institutions)} institui√ß√µes selecionadas")
        else:
            selected_institutions = "All"

        # Initial year filter
        initial_year = st.number_input(
            "Ano inicial:",
            min_value=2014,
            max_value=2024,
            value=2014,
            help="Filtrar dados a partir deste ano"
        )

        # When sending to the API, make it optional
        api_initial_year = initial_year if initial_year != 2014 else None

        # Grouping option
        grouped = st.radio(
            "N√≠vel de Detalhamento:",
            options=["Detalhado por Modalidade", "Agrupado (PF vs PJ)"],
            help="Escolha o n√≠vel de detalhamento da an√°lise",
            index=0
        )
        # Convert to API parameter (0 or 1)
        grouped_param = 1 if grouped == "Agrupado (PF vs PJ)" else 0

        # Show percentage toggle
        show_percentage = st.toggle(
            "Mostrar em percentual",
            value=True,
            help="Exibir valores em percentual do total ou valores absolutos"
        )

    # Main content area
    st.subheader("Composi√ß√£o da Carteira de Cr√©dito" +
                 (" - Mercado Total" if selected_institutions == "All"
              else f" - {', '.join(selected_institutions)}"))

    try:
        # Call the API with parameters
        params = {
            "select_institutions": selected_institutions,
            "initial_year": api_initial_year,
            "grouped": grouped_param,
            "show_percentage": show_percentage
        }

        response = requests.get(
            "https://bacen-api-522706975081.europe-west1.run.app/plot/credit_portfolio",
            params=params
        )

        if response.status_code == 200:
            fig_json = response.json()["figure_json"]
            fig = pio.from_json(fig_json)
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.error(f"API Error: {response.status_code}")
            st.error("Response Text:")
            try:
                error_details = response.json()
                st.json(error_details)
            except:
                st.error(response.text)

    except Exception as e:
        st.error(f"Error connecting to the API: {str(e)}")
        st.error(f"Full error: {e.__class__.__name__}: {str(e)}")

    # Add explanatory text
    with st.expander("‚ÑπÔ∏è Sobre esta an√°lise"):
        st.markdown("""
        ### Interpreta√ß√£o do Gr√°fico
        - O gr√°fico apresenta a composi√ß√£o da carteira de cr√©dito ao longo do tempo
        - As √°reas empilhadas mostram a propor√ß√£o de cada modalidade de cr√©dito
        - A an√°lise pode ser feita para o mercado total ou institui√ß√µes espec√≠ficas

        ### Modalidades de Cr√©dito

        #### Vis√£o Agrupada
        - **Pessoa F√≠sica (PF)**: Total das opera√ß√µes de cr√©dito para pessoas f√≠sicas
        - **Pessoa Jur√≠dica (PJ)**: Total das opera√ß√µes de cr√©dito para empresas

        #### Vis√£o Detalhada

        **Pessoa F√≠sica (PF)**
        - **Consignado**: Empr√©stimos com desconto em folha
        - **N√£o Consignado**: Empr√©stimos pessoais sem garantia
        - **Ve√≠culos**: Financiamento de ve√≠culos
        - **Habita√ß√£o**: Financiamento imobili√°rio
        - **Cart√£o de Cr√©dito**: Opera√ß√µes de cart√£o de cr√©dito
        - **Rural**: Cr√©dito rural e agroindustrial
        - **Outros**: Demais modalidades PF

        **Pessoa Jur√≠dica (PJ)**
        - **Receb√≠veis**: Antecipa√ß√£o de receb√≠veis
        - **Capital de Giro**: Financiamento de capital de giro
        - **Capital de Giro Rotativo**: Linhas rotativas de capital de giro
        - **Investimento**: Financiamento de investimentos
        - **Infraestrutura**: Financiamento de projetos de infraestrutura
        - **Com√©rcio Exterior**: Financiamento de importa√ß√£o/exporta√ß√£o
        - **Rural**: Cr√©dito rural e agroindustrial
        - **Habita√ß√£o**: Financiamento imobili√°rio PJ
        - **Outros**: Demais modalidades PJ

        ### Notas Metodol√≥gicas
        - Dados fonte: Bacen (IF.data)
        - Frequ√™ncia: Trimestral
        - Valores podem ser visualizados em termos percentuais ou absolutos
        - Na vis√£o percentual: (valor_modalidade / valor_total_carteira) * 100
        """)

if __name__ == "__main__":
    st.set_page_config(
        page_title="Carteira de Cr√©dito por IF",
        page_icon="üí≥",
        layout="wide"
    )
    main()
